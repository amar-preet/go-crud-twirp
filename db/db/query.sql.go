// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const deleteByID = `-- name: DeleteByID :exec
DELETE FROM albums
WHERE id=$1
`

func (q *Queries) DeleteByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteByID, id)
	return err
}

const get = `-- name: Get :many
SELECT id, title, artist, price FROM albums
`

func (q *Queries) Get(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, get)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, title, artist, price 
FROM albums 
WHERE id=$1
`

func (q *Queries) GetByID(ctx context.Context, id int32) (Album, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const post = `-- name: Post :one
INSERT INTO albums (title, artist, price)
VALUES ($1, $2, $3)
RETURNING id
`

type PostParams struct {
	Title  sql.NullString
	Artist sql.NullString
	Price  sql.NullInt32
}

func (q *Queries) Post(ctx context.Context, arg PostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, post, arg.Title, arg.Artist, arg.Price)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateByID = `-- name: UpdateByID :one
UPDATE albums
SET title = $2, artist = $3, price = $4 
WHERE id=$1
RETURNING id, title, artist, price
`

type UpdateByIDParams struct {
	ID     int32
	Title  sql.NullString
	Artist sql.NullString
	Price  sql.NullInt32
}

func (q *Queries) UpdateByID(ctx context.Context, arg UpdateByIDParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, updateByID,
		arg.ID,
		arg.Title,
		arg.Artist,
		arg.Price,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}
